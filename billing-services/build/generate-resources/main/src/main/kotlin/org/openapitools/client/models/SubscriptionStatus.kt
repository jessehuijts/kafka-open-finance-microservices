/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * This data element is containing information about the status of a subscription.   The following codes are defined for this data type.    * 'received':     The subscription data have been received and are technically correct. The data is not authorised yet.   * 'rejected':     The subscription data have been rejected e.g. since no successful authorisation has taken place.   * 'partiallyAuthorised':     The subscription is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.   * 'valid':     The subscription is accepted and valid for the related subscribed services as specified in the subscription object.   * 'validInChange':     The subscription is accepted and valid for the related subscribed services as specified in the subscription object. A new subscription entry has been     submitted which is not yet (fully) authorised.   * 'revokedByPsu':     The subscription has been revoked by the PSU towards the ASPSP.   * 'cancelledByAspsp':     The subscription has been cancelled by the ASPSP.   * 'expired':     The subscription expired.   * 'terminatedByTpp':     The corresponding TPP has terminated the subscription by applying the DELETE method to the subscription resource. 
 *
 * Values: received,rejected,partiallyAuthorised,valid,validInChange,revokedByPsu,cancelledByAspsp,expired,terminatedByTpp
 */

@JsonClass(generateAdapter = false)
enum class SubscriptionStatus(val value: kotlin.String) {

    @Json(name = "received")
    received("received"),

    @Json(name = "rejected")
    rejected("rejected"),

    @Json(name = "partiallyAuthorised")
    partiallyAuthorised("partiallyAuthorised"),

    @Json(name = "valid")
    valid("valid"),

    @Json(name = "validInChange")
    validInChange("validInChange"),

    @Json(name = "revokedByPsu")
    revokedByPsu("revokedByPsu"),

    @Json(name = "cancelledByAspsp")
    cancelledByAspsp("cancelledByAspsp"),

    @Json(name = "expired")
    expired("expired"),

    @Json(name = "terminatedByTpp")
    terminatedByTpp("terminatedByTpp");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is SubscriptionStatus) "$data" else null

        /**
         * Returns a valid [SubscriptionStatus] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): SubscriptionStatus? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

