/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.AccountReference
import org.openapitools.client.models.AdditionalInformationStructured
import org.openapitools.client.models.AdditionalPartyInformation
import org.openapitools.client.models.Amount
import org.openapitools.client.models.Balance
import org.openapitools.client.models.EntryDetailsElement
import org.openapitools.client.models.LinksTransactionDetails
import org.openapitools.client.models.PurposeCode
import org.openapitools.client.models.RemittanceInformationStructured
import org.openapitools.client.models.ReportExchangeRate

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Transaction details.
 *
 * @param transactionAmount 
 * @param transactionId This identification is given by the attribute transactionId of the corresponding entry of a transaction list. 
 * @param entryReference Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages. 
 * @param endToEndId Unique end to end identity.
 * @param batchIndicator If this indicator equals true, then the related entry is a batch entry. 
 * @param batchNumberOfTransactions Shall be used if and only if the batchIndicator is contained and equals true. 
 * @param mandateId Identification of Mandates, e.g. a SEPA Mandate ID.
 * @param checkId Identification of a Cheque.
 * @param creditorId Identification of Creditors, e.g. a SEPA Creditor ID.
 * @param bookingDate The date when an entry is posted to an account on the ASPSPs books. 
 * @param valueDate The Date at which assets become available to the account owner in case of a credit, or cease to be available to the account owner in case of a debit entry. **Usage:** If entry status is pending and value date is present, then the value date refers to an expected/requested value date.
 * @param currencyExchange Array of exchange rates.
 * @param creditorName Creditor name.
 * @param creditorAdditionalInformation 
 * @param creditorAccount 
 * @param creditorAgent BICFI 
 * @param ultimateCreditor Ultimate creditor.
 * @param ultimateCreditorAdditionalInformation 
 * @param debtorName Debtor name.
 * @param debtorAccount 
 * @param debtorAgent BICFI 
 * @param ultimateDebtor Ultimate debtor.
 * @param remittanceInformationUnstructured Unstructured remittance information. 
 * @param remittanceInformationUnstructuredArray Array of unstructured remittance information. 
 * @param remittanceInformationStructured Structured remittance information Max 
 * @param remittanceInformationStructuredArray Array of structured remittance information. 
 * @param entryDetails Might be used by the ASPSP to transport details about transactions within a batch. 
 * @param additionalInformation Might be used by the ASPSP to transport additional transaction related information to the PSU 
 * @param additionalInformationStructured 
 * @param purposeCode 
 * @param bankTransactionCode Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.   This code type is concatenating the three ISO20022 Codes    * Domain Code,    * Family Code, and    * SubFamily Code  by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'. For standing order reports the following codes are applicable:   * \"PMNT-ICDT-STDO\" for credit transfers,   * \"PMNT-IRCT-STDO\"  for instant credit transfers   * \"PMNT-ICDT-XBST\" for cross-border credit transfers   * \"PMNT-IRCT-XBST\" for cross-border real time credit transfers and   * \"PMNT-MCOP-OTHR\" for specific standing orders which have a dynamical amount to move left funds e.g. on month end to a saving account 
 * @param proprietaryBankTransactionCode Proprietary bank transaction code as used within a community or within an ASPSP e.g.  for MT94x based transaction reports. 
 * @param balanceAfterTransaction 
 * @param links 
 */


data class Transactions (

    @Json(name = "transactionAmount")
    val transactionAmount: Amount,

    /* This identification is given by the attribute transactionId of the corresponding entry of a transaction list.  */
    @Json(name = "transactionId")
    val transactionId: kotlin.String? = null,

    /* Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages.  */
    @Json(name = "entryReference")
    val entryReference: kotlin.String? = null,

    /* Unique end to end identity. */
    @Json(name = "endToEndId")
    val endToEndId: kotlin.String? = null,

    /* If this indicator equals true, then the related entry is a batch entry.  */
    @Json(name = "batchIndicator")
    val batchIndicator: kotlin.Boolean? = null,

    /* Shall be used if and only if the batchIndicator is contained and equals true.  */
    @Json(name = "batchNumberOfTransactions")
    val batchNumberOfTransactions: kotlin.Int? = null,

    /* Identification of Mandates, e.g. a SEPA Mandate ID. */
    @Json(name = "mandateId")
    val mandateId: kotlin.String? = null,

    /* Identification of a Cheque. */
    @Json(name = "checkId")
    val checkId: kotlin.String? = null,

    /* Identification of Creditors, e.g. a SEPA Creditor ID. */
    @Json(name = "creditorId")
    val creditorId: kotlin.String? = null,

    /* The date when an entry is posted to an account on the ASPSPs books.  */
    @Json(name = "bookingDate")
    val bookingDate: java.time.LocalDate? = null,

    /* The Date at which assets become available to the account owner in case of a credit, or cease to be available to the account owner in case of a debit entry. **Usage:** If entry status is pending and value date is present, then the value date refers to an expected/requested value date. */
    @Json(name = "valueDate")
    val valueDate: java.time.LocalDate? = null,

    /* Array of exchange rates. */
    @Json(name = "currencyExchange")
    val currencyExchange: kotlin.collections.List<ReportExchangeRate>? = null,

    /* Creditor name. */
    @Json(name = "creditorName")
    val creditorName: kotlin.String? = null,

    @Json(name = "creditorAdditionalInformation")
    val creditorAdditionalInformation: AdditionalPartyInformation? = null,

    @Json(name = "creditorAccount")
    val creditorAccount: AccountReference? = null,

    /* BICFI  */
    @Json(name = "creditorAgent")
    val creditorAgent: kotlin.String? = null,

    /* Ultimate creditor. */
    @Json(name = "ultimateCreditor")
    val ultimateCreditor: kotlin.String? = null,

    @Json(name = "ultimateCreditorAdditionalInformation")
    val ultimateCreditorAdditionalInformation: AdditionalPartyInformation? = null,

    /* Debtor name. */
    @Json(name = "debtorName")
    val debtorName: kotlin.String? = null,

    @Json(name = "debtorAccount")
    val debtorAccount: AccountReference? = null,

    /* BICFI  */
    @Json(name = "debtorAgent")
    val debtorAgent: kotlin.String? = null,

    /* Ultimate debtor. */
    @Json(name = "ultimateDebtor")
    val ultimateDebtor: kotlin.String? = null,

    /* Unstructured remittance information.  */
    @Json(name = "remittanceInformationUnstructured")
    val remittanceInformationUnstructured: kotlin.String? = null,

    /* Array of unstructured remittance information.  */
    @Json(name = "remittanceInformationUnstructuredArray")
    val remittanceInformationUnstructuredArray: kotlin.collections.List<kotlin.String>? = null,

    /* Structured remittance information Max  */
    @Json(name = "remittanceInformationStructured")
    val remittanceInformationStructured: kotlin.String? = null,

    /* Array of structured remittance information.  */
    @Json(name = "remittanceInformationStructuredArray")
    val remittanceInformationStructuredArray: kotlin.collections.List<RemittanceInformationStructured>? = null,

    /* Might be used by the ASPSP to transport details about transactions within a batch.  */
    @Json(name = "entryDetails")
    val entryDetails: kotlin.collections.List<EntryDetailsElement>? = null,

    /* Might be used by the ASPSP to transport additional transaction related information to the PSU  */
    @Json(name = "additionalInformation")
    val additionalInformation: kotlin.String? = null,

    @Json(name = "additionalInformationStructured")
    val additionalInformationStructured: AdditionalInformationStructured? = null,

    @Json(name = "purposeCode")
    val purposeCode: PurposeCode? = null,

    /* Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.   This code type is concatenating the three ISO20022 Codes    * Domain Code,    * Family Code, and    * SubFamily Code  by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'. For standing order reports the following codes are applicable:   * \"PMNT-ICDT-STDO\" for credit transfers,   * \"PMNT-IRCT-STDO\"  for instant credit transfers   * \"PMNT-ICDT-XBST\" for cross-border credit transfers   * \"PMNT-IRCT-XBST\" for cross-border real time credit transfers and   * \"PMNT-MCOP-OTHR\" for specific standing orders which have a dynamical amount to move left funds e.g. on month end to a saving account  */
    @Json(name = "bankTransactionCode")
    val bankTransactionCode: kotlin.String? = null,

    /* Proprietary bank transaction code as used within a community or within an ASPSP e.g.  for MT94x based transaction reports.  */
    @Json(name = "proprietaryBankTransactionCode")
    val proprietaryBankTransactionCode: kotlin.String? = null,

    @Json(name = "balanceAfterTransaction")
    val balanceAfterTransaction: Balance? = null,

    @Json(name = "_links")
    val links: LinksTransactionDetails? = null

)

