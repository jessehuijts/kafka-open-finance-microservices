/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.Error400NGPushAISASPSP
import org.openapitools.client.models.Error400PushAISASPSP
import org.openapitools.client.models.Error401NGPushAISASPSP
import org.openapitools.client.models.Error401PushAISASPSP
import org.openapitools.client.models.Error403NGPushAISASPSP
import org.openapitools.client.models.Error403PushAISASPSP
import org.openapitools.client.models.Error404NGPushAISASPSP
import org.openapitools.client.models.Error404PushAISASPSP
import org.openapitools.client.models.Error405NGPushAISASPSP
import org.openapitools.client.models.Error405PushAISASPSP
import org.openapitools.client.models.Error409NGPushAISASPSP
import org.openapitools.client.models.Error409PushAISASPSP
import org.openapitools.client.models.ScaStatusResponse
import org.openapitools.client.models.StartScaprocessResponse
import org.openapitools.client.models.StartSubscriptionAuthorisationRequest
import org.openapitools.client.models.UpdatePaymentPsuData200Response
import org.openapitools.client.models.UpdatePaymentPsuDataRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CommonServicesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.testbank.com/openFinance")
        }
    }

    /**
     * enum for parameter pushAccountinformationSubservice
     */
     enum class PushAccountinformationSubserviceGetSubscriptionEntryScaStatus(val value: kotlin.String) {
         @Json(name = "push-account-entries") accountMinusEntries("push-account-entries"),
         @Json(name = "push-account-statements") accountMinusStatements("push-account-statements"),
         @Json(name = "push-balances") balances("push-balances"),
         @Json(name = "push-requests-to-pay") requestsMinusToMinusPay("push-requests-to-pay")
     }

    /**
     * enum for parameter psUHttpMethod
     */
     enum class PsUHttpMethodGetSubscriptionEntryScaStatus(val value: kotlin.String) {
         @Json(name = "GET") GET("GET"),
         @Json(name = "POST") POST("POST"),
         @Json(name = "PUT") PUT("PUT"),
         @Json(name = "PATCH") PATCH("PATCH"),
         @Json(name = "DELETE") DELETE("DELETE")
     }

    /**
     * Read the SCA status of the addition of a subscription entry authorisation
     * This method returns the SCA status of a subscription initiation&#39;s authorisation sub-resource. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ScaStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSubscriptionEntryScaStatus(pushAccountinformationSubservice: PushAccountinformationSubserviceGetSubscriptionEntryScaStatus, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, digest: kotlin.String? = null, signature: kotlin.String? = null, tpPSignatureCertificate: kotlin.ByteArray? = null, psUIPAddress: kotlin.String? = null, psUIPPort: kotlin.String? = null, psUAccept: kotlin.String? = null, psUAcceptCharset: kotlin.String? = null, psUAcceptEncoding: kotlin.String? = null, psUAcceptLanguage: kotlin.String? = null, psUUserAgent: kotlin.String? = null, psUHttpMethod: PsUHttpMethodGetSubscriptionEntryScaStatus? = null, psUDeviceID: java.util.UUID? = null, psUGeoLocation: kotlin.String? = null) : ScaStatusResponse {
        val localVarResponse = getSubscriptionEntryScaStatusWithHttpInfo(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, subscriptionEntryId = subscriptionEntryId, authorisationId = authorisationId, xRequestID = xRequestID, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScaStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Read the SCA status of the addition of a subscription entry authorisation
     * This method returns the SCA status of a subscription initiation&#39;s authorisation sub-resource. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse<ScaStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSubscriptionEntryScaStatusWithHttpInfo(pushAccountinformationSubservice: PushAccountinformationSubserviceGetSubscriptionEntryScaStatus, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodGetSubscriptionEntryScaStatus?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?) : ApiResponse<ScaStatusResponse?> {
        val localVariableConfig = getSubscriptionEntryScaStatusRequestConfig(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, subscriptionEntryId = subscriptionEntryId, authorisationId = authorisationId, xRequestID = xRequestID, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation)

        return request<Unit, ScaStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSubscriptionEntryScaStatus
     *
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return RequestConfig
     */
    fun getSubscriptionEntryScaStatusRequestConfig(pushAccountinformationSubservice: PushAccountinformationSubserviceGetSubscriptionEntryScaStatus, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodGetSubscriptionEntryScaStatus?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestID.apply { localVariableHeaders["X-Request-ID"] = this.toString() }
        digest?.apply { localVariableHeaders["Digest"] = this.toString() }
        signature?.apply { localVariableHeaders["Signature"] = this.toString() }
        tpPSignatureCertificate?.apply { localVariableHeaders["TPP-Signature-Certificate"] = this.toString() }
        psUIPAddress?.apply { localVariableHeaders["PSU-IP-Address"] = this.toString() }
        psUIPPort?.apply { localVariableHeaders["PSU-IP-Port"] = this.toString() }
        psUAccept?.apply { localVariableHeaders["PSU-Accept"] = this.toString() }
        psUAcceptCharset?.apply { localVariableHeaders["PSU-Accept-Charset"] = this.toString() }
        psUAcceptEncoding?.apply { localVariableHeaders["PSU-Accept-Encoding"] = this.toString() }
        psUAcceptLanguage?.apply { localVariableHeaders["PSU-Accept-Language"] = this.toString() }
        psUUserAgent?.apply { localVariableHeaders["PSU-User-Agent"] = this.toString() }
        psUHttpMethod?.apply { localVariableHeaders["PSU-Http-Method"] = this.toString() }
        psUDeviceID?.apply { localVariableHeaders["PSU-Device-ID"] = this.toString() }
        psUGeoLocation?.apply { localVariableHeaders["PSU-Geo-Location"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/subscriptions/{push-accountinformation-subservice}/{subscriptionId}/subscription-entries/{subscriptionEntryId}/authorisations/{authorisationId}".replace("{"+"push-accountinformation-subservice"+"}", encodeURIComponent(pushAccountinformationSubservice.value.toString())).replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())).replace("{"+"subscriptionEntryId"+"}", encodeURIComponent(subscriptionEntryId.toString())).replace("{"+"authorisationId"+"}", encodeURIComponent(authorisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter pushAccountinformationSubservice
     */
     enum class PushAccountinformationSubserviceGetSubscriptionInitiationScaStatus(val value: kotlin.String) {
         @Json(name = "push-account-entries") accountMinusEntries("push-account-entries"),
         @Json(name = "push-account-statements") accountMinusStatements("push-account-statements"),
         @Json(name = "push-balances") balances("push-balances"),
         @Json(name = "push-requests-to-pay") requestsMinusToMinusPay("push-requests-to-pay")
     }

    /**
     * enum for parameter psUHttpMethod
     */
     enum class PsUHttpMethodGetSubscriptionInitiationScaStatus(val value: kotlin.String) {
         @Json(name = "GET") GET("GET"),
         @Json(name = "POST") POST("POST"),
         @Json(name = "PUT") PUT("PUT"),
         @Json(name = "PATCH") PATCH("PATCH"),
         @Json(name = "DELETE") DELETE("DELETE")
     }

    /**
     * Read the SCA status of the subscription initiation authorisation
     * This method returns the SCA status of a subscription initiation&#39;s authorisation sub-resource. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ScaStatusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSubscriptionInitiationScaStatus(pushAccountinformationSubservice: PushAccountinformationSubserviceGetSubscriptionInitiationScaStatus, subscriptionId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, digest: kotlin.String? = null, signature: kotlin.String? = null, tpPSignatureCertificate: kotlin.ByteArray? = null, psUIPAddress: kotlin.String? = null, psUIPPort: kotlin.String? = null, psUAccept: kotlin.String? = null, psUAcceptCharset: kotlin.String? = null, psUAcceptEncoding: kotlin.String? = null, psUAcceptLanguage: kotlin.String? = null, psUUserAgent: kotlin.String? = null, psUHttpMethod: PsUHttpMethodGetSubscriptionInitiationScaStatus? = null, psUDeviceID: java.util.UUID? = null, psUGeoLocation: kotlin.String? = null) : ScaStatusResponse {
        val localVarResponse = getSubscriptionInitiationScaStatusWithHttpInfo(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, authorisationId = authorisationId, xRequestID = xRequestID, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScaStatusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Read the SCA status of the subscription initiation authorisation
     * This method returns the SCA status of a subscription initiation&#39;s authorisation sub-resource. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return ApiResponse<ScaStatusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSubscriptionInitiationScaStatusWithHttpInfo(pushAccountinformationSubservice: PushAccountinformationSubserviceGetSubscriptionInitiationScaStatus, subscriptionId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodGetSubscriptionInitiationScaStatus?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?) : ApiResponse<ScaStatusResponse?> {
        val localVariableConfig = getSubscriptionInitiationScaStatusRequestConfig(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, authorisationId = authorisationId, xRequestID = xRequestID, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation)

        return request<Unit, ScaStatusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getSubscriptionInitiationScaStatus
     *
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @return RequestConfig
     */
    fun getSubscriptionInitiationScaStatusRequestConfig(pushAccountinformationSubservice: PushAccountinformationSubserviceGetSubscriptionInitiationScaStatus, subscriptionId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodGetSubscriptionInitiationScaStatus?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestID.apply { localVariableHeaders["X-Request-ID"] = this.toString() }
        digest?.apply { localVariableHeaders["Digest"] = this.toString() }
        signature?.apply { localVariableHeaders["Signature"] = this.toString() }
        tpPSignatureCertificate?.apply { localVariableHeaders["TPP-Signature-Certificate"] = this.toString() }
        psUIPAddress?.apply { localVariableHeaders["PSU-IP-Address"] = this.toString() }
        psUIPPort?.apply { localVariableHeaders["PSU-IP-Port"] = this.toString() }
        psUAccept?.apply { localVariableHeaders["PSU-Accept"] = this.toString() }
        psUAcceptCharset?.apply { localVariableHeaders["PSU-Accept-Charset"] = this.toString() }
        psUAcceptEncoding?.apply { localVariableHeaders["PSU-Accept-Encoding"] = this.toString() }
        psUAcceptLanguage?.apply { localVariableHeaders["PSU-Accept-Language"] = this.toString() }
        psUUserAgent?.apply { localVariableHeaders["PSU-User-Agent"] = this.toString() }
        psUHttpMethod?.apply { localVariableHeaders["PSU-Http-Method"] = this.toString() }
        psUDeviceID?.apply { localVariableHeaders["PSU-Device-ID"] = this.toString() }
        psUGeoLocation?.apply { localVariableHeaders["PSU-Geo-Location"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/subscriptions/{push-accountinformation-subservice}/{subscriptionId}/authorisations/{authorisationId}".replace("{"+"push-accountinformation-subservice"+"}", encodeURIComponent(pushAccountinformationSubservice.value.toString())).replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())).replace("{"+"authorisationId"+"}", encodeURIComponent(authorisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter pushAccountinformationSubservice
     */
     enum class PushAccountinformationSubserviceStartSubscriptionAuthorisation(val value: kotlin.String) {
         @Json(name = "push-account-entries") accountMinusEntries("push-account-entries"),
         @Json(name = "push-account-statements") accountMinusStatements("push-account-statements"),
         @Json(name = "push-balances") balances("push-balances"),
         @Json(name = "push-requests-to-pay") requestsMinusToMinusPay("push-requests-to-pay")
     }

    /**
     * enum for parameter psUHttpMethod
     */
     enum class PsUHttpMethodStartSubscriptionAuthorisation(val value: kotlin.String) {
         @Json(name = "GET") GET("GET"),
         @Json(name = "POST") POST("POST"),
         @Json(name = "PUT") PUT("PUT"),
         @Json(name = "PATCH") PATCH("PATCH"),
         @Json(name = "DELETE") DELETE("DELETE")
     }

    /**
     * Start the authorisation process for a subscription initiation
     * Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentification&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startSubscriptionAuthorisationRequest  (optional)
     * @return StartScaprocessResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun startSubscriptionAuthorisation(pushAccountinformationSubservice: PushAccountinformationSubserviceStartSubscriptionAuthorisation, subscriptionId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String? = null, psUIDType: kotlin.String? = null, psUCorporateID: kotlin.String? = null, psUCorporateIDType: kotlin.String? = null, tpPRedirectPreferred: kotlin.Boolean? = null, tpPRedirectURI: java.net.URI? = null, tpPNokRedirectURI: java.net.URI? = null, clientNotificationURI: kotlin.String? = null, clientNotificationContentPreferred: kotlin.String? = null, digest: kotlin.String? = null, signature: kotlin.String? = null, tpPSignatureCertificate: kotlin.ByteArray? = null, psUIPAddress: kotlin.String? = null, psUIPPort: kotlin.String? = null, psUAccept: kotlin.String? = null, psUAcceptCharset: kotlin.String? = null, psUAcceptEncoding: kotlin.String? = null, psUAcceptLanguage: kotlin.String? = null, psUUserAgent: kotlin.String? = null, psUHttpMethod: PsUHttpMethodStartSubscriptionAuthorisation? = null, psUDeviceID: java.util.UUID? = null, psUGeoLocation: kotlin.String? = null, startSubscriptionAuthorisationRequest: StartSubscriptionAuthorisationRequest? = null) : StartScaprocessResponse {
        val localVarResponse = startSubscriptionAuthorisationWithHttpInfo(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, tpPRedirectPreferred = tpPRedirectPreferred, tpPRedirectURI = tpPRedirectURI, tpPNokRedirectURI = tpPNokRedirectURI, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, startSubscriptionAuthorisationRequest = startSubscriptionAuthorisationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StartScaprocessResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start the authorisation process for a subscription initiation
     * Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentification&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startSubscriptionAuthorisationRequest  (optional)
     * @return ApiResponse<StartScaprocessResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun startSubscriptionAuthorisationWithHttpInfo(pushAccountinformationSubservice: PushAccountinformationSubserviceStartSubscriptionAuthorisation, subscriptionId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, tpPRedirectPreferred: kotlin.Boolean?, tpPRedirectURI: java.net.URI?, tpPNokRedirectURI: java.net.URI?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodStartSubscriptionAuthorisation?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, startSubscriptionAuthorisationRequest: StartSubscriptionAuthorisationRequest?) : ApiResponse<StartScaprocessResponse?> {
        val localVariableConfig = startSubscriptionAuthorisationRequestConfig(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, tpPRedirectPreferred = tpPRedirectPreferred, tpPRedirectURI = tpPRedirectURI, tpPNokRedirectURI = tpPNokRedirectURI, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, startSubscriptionAuthorisationRequest = startSubscriptionAuthorisationRequest)

        return request<StartSubscriptionAuthorisationRequest, StartScaprocessResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation startSubscriptionAuthorisation
     *
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startSubscriptionAuthorisationRequest  (optional)
     * @return RequestConfig
     */
    fun startSubscriptionAuthorisationRequestConfig(pushAccountinformationSubservice: PushAccountinformationSubserviceStartSubscriptionAuthorisation, subscriptionId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, tpPRedirectPreferred: kotlin.Boolean?, tpPRedirectURI: java.net.URI?, tpPNokRedirectURI: java.net.URI?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodStartSubscriptionAuthorisation?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, startSubscriptionAuthorisationRequest: StartSubscriptionAuthorisationRequest?) : RequestConfig<StartSubscriptionAuthorisationRequest> {
        val localVariableBody = startSubscriptionAuthorisationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestID.apply { localVariableHeaders["X-Request-ID"] = this.toString() }
        PSU_ID?.apply { localVariableHeaders["PSU-ID"] = this.toString() }
        psUIDType?.apply { localVariableHeaders["PSU-ID-Type"] = this.toString() }
        psUCorporateID?.apply { localVariableHeaders["PSU-Corporate-ID"] = this.toString() }
        psUCorporateIDType?.apply { localVariableHeaders["PSU-Corporate-ID-Type"] = this.toString() }
        tpPRedirectPreferred?.apply { localVariableHeaders["TPP-Redirect-Preferred"] = this.toString() }
        tpPRedirectURI?.apply { localVariableHeaders["TPP-Redirect-URI"] = this.toString() }
        tpPNokRedirectURI?.apply { localVariableHeaders["TPP-Nok-Redirect-URI"] = this.toString() }
        clientNotificationURI?.apply { localVariableHeaders["Client-Notification-URI"] = this.toString() }
        clientNotificationContentPreferred?.apply { localVariableHeaders["Client-Notification-Content-Preferred"] = this.toString() }
        digest?.apply { localVariableHeaders["Digest"] = this.toString() }
        signature?.apply { localVariableHeaders["Signature"] = this.toString() }
        tpPSignatureCertificate?.apply { localVariableHeaders["TPP-Signature-Certificate"] = this.toString() }
        psUIPAddress?.apply { localVariableHeaders["PSU-IP-Address"] = this.toString() }
        psUIPPort?.apply { localVariableHeaders["PSU-IP-Port"] = this.toString() }
        psUAccept?.apply { localVariableHeaders["PSU-Accept"] = this.toString() }
        psUAcceptCharset?.apply { localVariableHeaders["PSU-Accept-Charset"] = this.toString() }
        psUAcceptEncoding?.apply { localVariableHeaders["PSU-Accept-Encoding"] = this.toString() }
        psUAcceptLanguage?.apply { localVariableHeaders["PSU-Accept-Language"] = this.toString() }
        psUUserAgent?.apply { localVariableHeaders["PSU-User-Agent"] = this.toString() }
        psUHttpMethod?.apply { localVariableHeaders["PSU-Http-Method"] = this.toString() }
        psUDeviceID?.apply { localVariableHeaders["PSU-Device-ID"] = this.toString() }
        psUGeoLocation?.apply { localVariableHeaders["PSU-Geo-Location"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/subscriptions/{push-accountinformation-subservice}/{subscriptionId}/authorisations".replace("{"+"push-accountinformation-subservice"+"}", encodeURIComponent(pushAccountinformationSubservice.value.toString())).replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter pushAccountinformationSubservice
     */
     enum class PushAccountinformationSubserviceStartSubscriptionEntryAuthorisation(val value: kotlin.String) {
         @Json(name = "push-account-entries") accountMinusEntries("push-account-entries"),
         @Json(name = "push-account-statements") accountMinusStatements("push-account-statements"),
         @Json(name = "push-balances") balances("push-balances"),
         @Json(name = "push-requests-to-pay") requestsMinusToMinusPay("push-requests-to-pay")
     }

    /**
     * enum for parameter psUHttpMethod
     */
     enum class PsUHttpMethodStartSubscriptionEntryAuthorisation(val value: kotlin.String) {
         @Json(name = "GET") GET("GET"),
         @Json(name = "POST") POST("POST"),
         @Json(name = "PUT") PUT("PUT"),
         @Json(name = "PATCH") PATCH("PATCH"),
         @Json(name = "DELETE") DELETE("DELETE")
     }

    /**
     * Start the authorisation process for the addition of a subscription entry
     * Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentification&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPDecoupledPreferred If it equals \&quot;true\&quot;, the TPP prefers a decoupled SCA approach.  If it equals \&quot;false\&quot;, the TPP prefers not to use the decoupled approach for SCA. The ASPSP will then choose between the embedded or the redirect SCA approach, depending on the choice of the SCA procedure by the TPP/PSU.  If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the parameter TPP-Redirect-Preferred and the SCA method chosen by the TPP/PSU.  The parameter might be ignored by the ASPSP. If both parameters TPP-Redirect-Preferred and TPP-Decoupled-Preferred are present and true, the request is still not rejected, but it is up to the ASPSP, which approach will actually be used.  **Remark for Future:**  TPP-Redirect-Preferred and TPP-Decoupled-Preferred will be revised in future versions, maybe merged. Currently kept separate for downward compatibility.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startSubscriptionAuthorisationRequest  (optional)
     * @return StartScaprocessResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun startSubscriptionEntryAuthorisation(pushAccountinformationSubservice: PushAccountinformationSubserviceStartSubscriptionEntryAuthorisation, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String? = null, psUIDType: kotlin.String? = null, psUCorporateID: kotlin.String? = null, psUCorporateIDType: kotlin.String? = null, tpPRedirectPreferred: kotlin.Boolean? = null, tpPDecoupledPreferred: kotlin.Boolean? = null, tpPRedirectURI: java.net.URI? = null, tpPNokRedirectURI: java.net.URI? = null, clientNotificationURI: kotlin.String? = null, clientNotificationContentPreferred: kotlin.String? = null, digest: kotlin.String? = null, signature: kotlin.String? = null, tpPSignatureCertificate: kotlin.ByteArray? = null, psUIPAddress: kotlin.String? = null, psUIPPort: kotlin.String? = null, psUAccept: kotlin.String? = null, psUAcceptCharset: kotlin.String? = null, psUAcceptEncoding: kotlin.String? = null, psUAcceptLanguage: kotlin.String? = null, psUUserAgent: kotlin.String? = null, psUHttpMethod: PsUHttpMethodStartSubscriptionEntryAuthorisation? = null, psUDeviceID: java.util.UUID? = null, psUGeoLocation: kotlin.String? = null, startSubscriptionAuthorisationRequest: StartSubscriptionAuthorisationRequest? = null) : StartScaprocessResponse {
        val localVarResponse = startSubscriptionEntryAuthorisationWithHttpInfo(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, subscriptionEntryId = subscriptionEntryId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, tpPRedirectPreferred = tpPRedirectPreferred, tpPDecoupledPreferred = tpPDecoupledPreferred, tpPRedirectURI = tpPRedirectURI, tpPNokRedirectURI = tpPNokRedirectURI, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, startSubscriptionAuthorisationRequest = startSubscriptionAuthorisationRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StartScaprocessResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Start the authorisation process for the addition of a subscription entry
     * Create an authorisation sub-resource and start the authorisation process.  The message might in addition transmit authentication and authorisation related data.   This method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the transaction.  The ASPSP might make the usage of this access method unnecessary in case  of only one SCA process needed, since the related authorisation resource  might be automatically created by the ASPSP after the submission of the  payment data with the first POST payments/{payment-product} call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding Payment      initiation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be      uploaded by using the extended forms:     * &#39;startAuthorisationWithPsuIdentification&#39;     * &#39;startAuthorisationWithPsuAuthentication&#39;     * &#39;startAuthorisationWithEncryptedPsuAuthentication&#39;     * &#39;startAuthorisationWithAuthentciationMethodSelection&#39;   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with a &#39;startAuthorisation&#39; hyperlink in the preceding      Payment cancellation response that an explicit start of the authorisation process is needed by the TPP.      The &#39;startAuthorisation&#39; hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPDecoupledPreferred If it equals \&quot;true\&quot;, the TPP prefers a decoupled SCA approach.  If it equals \&quot;false\&quot;, the TPP prefers not to use the decoupled approach for SCA. The ASPSP will then choose between the embedded or the redirect SCA approach, depending on the choice of the SCA procedure by the TPP/PSU.  If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the parameter TPP-Redirect-Preferred and the SCA method chosen by the TPP/PSU.  The parameter might be ignored by the ASPSP. If both parameters TPP-Redirect-Preferred and TPP-Decoupled-Preferred are present and true, the request is still not rejected, but it is up to the ASPSP, which approach will actually be used.  **Remark for Future:**  TPP-Redirect-Preferred and TPP-Decoupled-Preferred will be revised in future versions, maybe merged. Currently kept separate for downward compatibility.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startSubscriptionAuthorisationRequest  (optional)
     * @return ApiResponse<StartScaprocessResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun startSubscriptionEntryAuthorisationWithHttpInfo(pushAccountinformationSubservice: PushAccountinformationSubserviceStartSubscriptionEntryAuthorisation, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, tpPRedirectPreferred: kotlin.Boolean?, tpPDecoupledPreferred: kotlin.Boolean?, tpPRedirectURI: java.net.URI?, tpPNokRedirectURI: java.net.URI?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodStartSubscriptionEntryAuthorisation?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, startSubscriptionAuthorisationRequest: StartSubscriptionAuthorisationRequest?) : ApiResponse<StartScaprocessResponse?> {
        val localVariableConfig = startSubscriptionEntryAuthorisationRequestConfig(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, subscriptionEntryId = subscriptionEntryId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, tpPRedirectPreferred = tpPRedirectPreferred, tpPDecoupledPreferred = tpPDecoupledPreferred, tpPRedirectURI = tpPRedirectURI, tpPNokRedirectURI = tpPNokRedirectURI, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, startSubscriptionAuthorisationRequest = startSubscriptionAuthorisationRequest)

        return request<StartSubscriptionAuthorisationRequest, StartScaprocessResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation startSubscriptionEntryAuthorisation
     *
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPDecoupledPreferred If it equals \&quot;true\&quot;, the TPP prefers a decoupled SCA approach.  If it equals \&quot;false\&quot;, the TPP prefers not to use the decoupled approach for SCA. The ASPSP will then choose between the embedded or the redirect SCA approach, depending on the choice of the SCA procedure by the TPP/PSU.  If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the parameter TPP-Redirect-Preferred and the SCA method chosen by the TPP/PSU.  The parameter might be ignored by the ASPSP. If both parameters TPP-Redirect-Preferred and TPP-Decoupled-Preferred are present and true, the request is still not rejected, but it is up to the ASPSP, which approach will actually be used.  **Remark for Future:**  TPP-Redirect-Preferred and TPP-Decoupled-Preferred will be revised in future versions, maybe merged. Currently kept separate for downward compatibility.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param startSubscriptionAuthorisationRequest  (optional)
     * @return RequestConfig
     */
    fun startSubscriptionEntryAuthorisationRequestConfig(pushAccountinformationSubservice: PushAccountinformationSubserviceStartSubscriptionEntryAuthorisation, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, tpPRedirectPreferred: kotlin.Boolean?, tpPDecoupledPreferred: kotlin.Boolean?, tpPRedirectURI: java.net.URI?, tpPNokRedirectURI: java.net.URI?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodStartSubscriptionEntryAuthorisation?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, startSubscriptionAuthorisationRequest: StartSubscriptionAuthorisationRequest?) : RequestConfig<StartSubscriptionAuthorisationRequest> {
        val localVariableBody = startSubscriptionAuthorisationRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestID.apply { localVariableHeaders["X-Request-ID"] = this.toString() }
        PSU_ID?.apply { localVariableHeaders["PSU-ID"] = this.toString() }
        psUIDType?.apply { localVariableHeaders["PSU-ID-Type"] = this.toString() }
        psUCorporateID?.apply { localVariableHeaders["PSU-Corporate-ID"] = this.toString() }
        psUCorporateIDType?.apply { localVariableHeaders["PSU-Corporate-ID-Type"] = this.toString() }
        tpPRedirectPreferred?.apply { localVariableHeaders["TPP-Redirect-Preferred"] = this.toString() }
        tpPDecoupledPreferred?.apply { localVariableHeaders["TPP-Decoupled-Preferred"] = this.toString() }
        tpPRedirectURI?.apply { localVariableHeaders["TPP-Redirect-URI"] = this.toString() }
        tpPNokRedirectURI?.apply { localVariableHeaders["TPP-Nok-Redirect-URI"] = this.toString() }
        clientNotificationURI?.apply { localVariableHeaders["Client-Notification-URI"] = this.toString() }
        clientNotificationContentPreferred?.apply { localVariableHeaders["Client-Notification-Content-Preferred"] = this.toString() }
        digest?.apply { localVariableHeaders["Digest"] = this.toString() }
        signature?.apply { localVariableHeaders["Signature"] = this.toString() }
        tpPSignatureCertificate?.apply { localVariableHeaders["TPP-Signature-Certificate"] = this.toString() }
        psUIPAddress?.apply { localVariableHeaders["PSU-IP-Address"] = this.toString() }
        psUIPPort?.apply { localVariableHeaders["PSU-IP-Port"] = this.toString() }
        psUAccept?.apply { localVariableHeaders["PSU-Accept"] = this.toString() }
        psUAcceptCharset?.apply { localVariableHeaders["PSU-Accept-Charset"] = this.toString() }
        psUAcceptEncoding?.apply { localVariableHeaders["PSU-Accept-Encoding"] = this.toString() }
        psUAcceptLanguage?.apply { localVariableHeaders["PSU-Accept-Language"] = this.toString() }
        psUUserAgent?.apply { localVariableHeaders["PSU-User-Agent"] = this.toString() }
        psUHttpMethod?.apply { localVariableHeaders["PSU-Http-Method"] = this.toString() }
        psUDeviceID?.apply { localVariableHeaders["PSU-Device-ID"] = this.toString() }
        psUGeoLocation?.apply { localVariableHeaders["PSU-Geo-Location"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/subscriptions/{push-accountinformation-subservice}/{subscriptionId}/subscription-entries/{subscriptionEntryId}/authorisations".replace("{"+"push-accountinformation-subservice"+"}", encodeURIComponent(pushAccountinformationSubservice.value.toString())).replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())).replace("{"+"subscriptionEntryId"+"}", encodeURIComponent(subscriptionEntryId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter pushAccountinformationSubservice
     */
     enum class PushAccountinformationSubserviceUpdatePaymentPsuData(val value: kotlin.String) {
         @Json(name = "push-account-entries") accountMinusEntries("push-account-entries"),
         @Json(name = "push-account-statements") accountMinusStatements("push-account-statements"),
         @Json(name = "push-balances") balances("push-balances"),
         @Json(name = "push-requests-to-pay") requestsMinusToMinusPay("push-requests-to-pay")
     }

    /**
     * enum for parameter psUHttpMethod
     */
     enum class PsUHttpMethodUpdatePaymentPsuData(val value: kotlin.String) {
         @Json(name = "GET") GET("GET"),
         @Json(name = "POST") POST("POST"),
         @Json(name = "PUT") PUT("PUT"),
         @Json(name = "PATCH") PATCH("PATCH"),
         @Json(name = "DELETE") DELETE("DELETE")
     }

    /**
     * Update PSU data for subscription initiation
     * This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU authorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updatePaymentPsuDataRequest  (optional)
     * @return UpdatePaymentPsuData200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updatePaymentPsuData(pushAccountinformationSubservice: PushAccountinformationSubserviceUpdatePaymentPsuData, subscriptionId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String? = null, psUIDType: kotlin.String? = null, psUCorporateID: kotlin.String? = null, psUCorporateIDType: kotlin.String? = null, tpPRedirectPreferred: kotlin.Boolean? = null, tpPRedirectURI: java.net.URI? = null, tpPNokRedirectURI: java.net.URI? = null, clientNotificationURI: kotlin.String? = null, clientNotificationContentPreferred: kotlin.String? = null, digest: kotlin.String? = null, signature: kotlin.String? = null, tpPSignatureCertificate: kotlin.ByteArray? = null, psUIPAddress: kotlin.String? = null, psUIPPort: kotlin.String? = null, psUAccept: kotlin.String? = null, psUAcceptCharset: kotlin.String? = null, psUAcceptEncoding: kotlin.String? = null, psUAcceptLanguage: kotlin.String? = null, psUUserAgent: kotlin.String? = null, psUHttpMethod: PsUHttpMethodUpdatePaymentPsuData? = null, psUDeviceID: java.util.UUID? = null, psUGeoLocation: kotlin.String? = null, updatePaymentPsuDataRequest: UpdatePaymentPsuDataRequest? = null) : UpdatePaymentPsuData200Response {
        val localVarResponse = updatePaymentPsuDataWithHttpInfo(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, authorisationId = authorisationId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, tpPRedirectPreferred = tpPRedirectPreferred, tpPRedirectURI = tpPRedirectURI, tpPNokRedirectURI = tpPNokRedirectURI, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, updatePaymentPsuDataRequest = updatePaymentPsuDataRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdatePaymentPsuData200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update PSU data for subscription initiation
     * This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU authorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updatePaymentPsuDataRequest  (optional)
     * @return ApiResponse<UpdatePaymentPsuData200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updatePaymentPsuDataWithHttpInfo(pushAccountinformationSubservice: PushAccountinformationSubserviceUpdatePaymentPsuData, subscriptionId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, tpPRedirectPreferred: kotlin.Boolean?, tpPRedirectURI: java.net.URI?, tpPNokRedirectURI: java.net.URI?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodUpdatePaymentPsuData?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, updatePaymentPsuDataRequest: UpdatePaymentPsuDataRequest?) : ApiResponse<UpdatePaymentPsuData200Response?> {
        val localVariableConfig = updatePaymentPsuDataRequestConfig(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, authorisationId = authorisationId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, tpPRedirectPreferred = tpPRedirectPreferred, tpPRedirectURI = tpPRedirectURI, tpPNokRedirectURI = tpPNokRedirectURI, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, updatePaymentPsuDataRequest = updatePaymentPsuDataRequest)

        return request<UpdatePaymentPsuDataRequest, UpdatePaymentPsuData200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updatePaymentPsuData
     *
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param tpPRedirectPreferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the parameter TPP-Decoupled-Preferred and the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.  (optional)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification.  (optional)
     * @param tpPNokRedirectURI If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updatePaymentPsuDataRequest  (optional)
     * @return RequestConfig
     */
    fun updatePaymentPsuDataRequestConfig(pushAccountinformationSubservice: PushAccountinformationSubserviceUpdatePaymentPsuData, subscriptionId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, tpPRedirectPreferred: kotlin.Boolean?, tpPRedirectURI: java.net.URI?, tpPNokRedirectURI: java.net.URI?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodUpdatePaymentPsuData?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, updatePaymentPsuDataRequest: UpdatePaymentPsuDataRequest?) : RequestConfig<UpdatePaymentPsuDataRequest> {
        val localVariableBody = updatePaymentPsuDataRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestID.apply { localVariableHeaders["X-Request-ID"] = this.toString() }
        PSU_ID?.apply { localVariableHeaders["PSU-ID"] = this.toString() }
        psUIDType?.apply { localVariableHeaders["PSU-ID-Type"] = this.toString() }
        psUCorporateID?.apply { localVariableHeaders["PSU-Corporate-ID"] = this.toString() }
        psUCorporateIDType?.apply { localVariableHeaders["PSU-Corporate-ID-Type"] = this.toString() }
        tpPRedirectPreferred?.apply { localVariableHeaders["TPP-Redirect-Preferred"] = this.toString() }
        tpPRedirectURI?.apply { localVariableHeaders["TPP-Redirect-URI"] = this.toString() }
        tpPNokRedirectURI?.apply { localVariableHeaders["TPP-Nok-Redirect-URI"] = this.toString() }
        clientNotificationURI?.apply { localVariableHeaders["Client-Notification-URI"] = this.toString() }
        clientNotificationContentPreferred?.apply { localVariableHeaders["Client-Notification-Content-Preferred"] = this.toString() }
        digest?.apply { localVariableHeaders["Digest"] = this.toString() }
        signature?.apply { localVariableHeaders["Signature"] = this.toString() }
        tpPSignatureCertificate?.apply { localVariableHeaders["TPP-Signature-Certificate"] = this.toString() }
        psUIPAddress?.apply { localVariableHeaders["PSU-IP-Address"] = this.toString() }
        psUIPPort?.apply { localVariableHeaders["PSU-IP-Port"] = this.toString() }
        psUAccept?.apply { localVariableHeaders["PSU-Accept"] = this.toString() }
        psUAcceptCharset?.apply { localVariableHeaders["PSU-Accept-Charset"] = this.toString() }
        psUAcceptEncoding?.apply { localVariableHeaders["PSU-Accept-Encoding"] = this.toString() }
        psUAcceptLanguage?.apply { localVariableHeaders["PSU-Accept-Language"] = this.toString() }
        psUUserAgent?.apply { localVariableHeaders["PSU-User-Agent"] = this.toString() }
        psUHttpMethod?.apply { localVariableHeaders["PSU-Http-Method"] = this.toString() }
        psUDeviceID?.apply { localVariableHeaders["PSU-Device-ID"] = this.toString() }
        psUGeoLocation?.apply { localVariableHeaders["PSU-Geo-Location"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/subscriptions/{push-accountinformation-subservice}/{subscriptionId}/authorisations/{authorisationId}".replace("{"+"push-accountinformation-subservice"+"}", encodeURIComponent(pushAccountinformationSubservice.value.toString())).replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())).replace("{"+"authorisationId"+"}", encodeURIComponent(authorisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter pushAccountinformationSubservice
     */
     enum class PushAccountinformationSubserviceUpdateSubscriptionEntryPsuData(val value: kotlin.String) {
         @Json(name = "push-account-entries") accountMinusEntries("push-account-entries"),
         @Json(name = "push-account-statements") accountMinusStatements("push-account-statements"),
         @Json(name = "push-balances") balances("push-balances"),
         @Json(name = "push-requests-to-pay") requestsMinusToMinusPay("push-requests-to-pay")
     }

    /**
     * enum for parameter psUHttpMethod
     */
     enum class PsUHttpMethodUpdateSubscriptionEntryPsuData(val value: kotlin.String) {
         @Json(name = "GET") GET("GET"),
         @Json(name = "POST") POST("POST"),
         @Json(name = "PUT") PUT("PUT"),
         @Json(name = "PATCH") PATCH("PATCH"),
         @Json(name = "DELETE") DELETE("DELETE")
     }

    /**
     * Update PSU data for addition of a subscription entry initiation
     * This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU authorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updatePaymentPsuDataRequest  (optional)
     * @return UpdatePaymentPsuData200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateSubscriptionEntryPsuData(pushAccountinformationSubservice: PushAccountinformationSubserviceUpdateSubscriptionEntryPsuData, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String? = null, psUIDType: kotlin.String? = null, psUCorporateID: kotlin.String? = null, psUCorporateIDType: kotlin.String? = null, clientNotificationURI: kotlin.String? = null, clientNotificationContentPreferred: kotlin.String? = null, digest: kotlin.String? = null, signature: kotlin.String? = null, tpPSignatureCertificate: kotlin.ByteArray? = null, psUIPAddress: kotlin.String? = null, psUIPPort: kotlin.String? = null, psUAccept: kotlin.String? = null, psUAcceptCharset: kotlin.String? = null, psUAcceptEncoding: kotlin.String? = null, psUAcceptLanguage: kotlin.String? = null, psUUserAgent: kotlin.String? = null, psUHttpMethod: PsUHttpMethodUpdateSubscriptionEntryPsuData? = null, psUDeviceID: java.util.UUID? = null, psUGeoLocation: kotlin.String? = null, updatePaymentPsuDataRequest: UpdatePaymentPsuDataRequest? = null) : UpdatePaymentPsuData200Response {
        val localVarResponse = updateSubscriptionEntryPsuDataWithHttpInfo(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, subscriptionEntryId = subscriptionEntryId, authorisationId = authorisationId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, updatePaymentPsuDataRequest = updatePaymentPsuDataRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UpdatePaymentPsuData200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update PSU data for addition of a subscription entry initiation
     * This methods updates PSU data on the authorisation resource if needed.  It may authorise a payment within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  There are several possible update PSU data requests in the context of payment initiation services needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific update PSU data request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific update PSU data request is only applicable for   * adding the PSU identification, if not provided yet in the payment initiation request or the account information consent request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU identification   * Update PSU authentication   * Select PSU authorization method      WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction authorisation     WARNING: This method needs a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. 
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updatePaymentPsuDataRequest  (optional)
     * @return ApiResponse<UpdatePaymentPsuData200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateSubscriptionEntryPsuDataWithHttpInfo(pushAccountinformationSubservice: PushAccountinformationSubserviceUpdateSubscriptionEntryPsuData, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodUpdateSubscriptionEntryPsuData?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, updatePaymentPsuDataRequest: UpdatePaymentPsuDataRequest?) : ApiResponse<UpdatePaymentPsuData200Response?> {
        val localVariableConfig = updateSubscriptionEntryPsuDataRequestConfig(pushAccountinformationSubservice = pushAccountinformationSubservice, subscriptionId = subscriptionId, subscriptionEntryId = subscriptionEntryId, authorisationId = authorisationId, xRequestID = xRequestID, PSU_ID = PSU_ID, psUIDType = psUIDType, psUCorporateID = psUCorporateID, psUCorporateIDType = psUCorporateIDType, clientNotificationURI = clientNotificationURI, clientNotificationContentPreferred = clientNotificationContentPreferred, digest = digest, signature = signature, tpPSignatureCertificate = tpPSignatureCertificate, psUIPAddress = psUIPAddress, psUIPPort = psUIPPort, psUAccept = psUAccept, psUAcceptCharset = psUAcceptCharset, psUAcceptEncoding = psUAcceptEncoding, psUAcceptLanguage = psUAcceptLanguage, psUUserAgent = psUUserAgent, psUHttpMethod = psUHttpMethod, psUDeviceID = psUDeviceID, psUGeoLocation = psUGeoLocation, updatePaymentPsuDataRequest = updatePaymentPsuDataRequest)

        return request<UpdatePaymentPsuDataRequest, UpdatePaymentPsuData200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateSubscriptionEntryPsuData
     *
     * @param pushAccountinformationSubservice push-accountinformation-subservice: The addressed subservice endpoint, e.g. for push-account-entries. The default list of sub services supported in this standard is: * push-account-entries * push-account-statements * push-balances * push-requests-to-pay 
     * @param subscriptionId subscriptionId as received in the body of a (positive) initiateSubscription response 
     * @param subscriptionEntryId subscriptionEntryId as received in the body of a (positive) initiateSubscription or addSubscriptionEntry response 
     * @param authorisationId Resource identification of the related SCA.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party.
     * @param PSU_ID Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation.  (optional)
     * @param psUIDType Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation.  (optional)
     * @param psUCorporateID Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param psUCorporateIDType Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context.  (optional)
     * @param clientNotificationURI URI for the Endpoint of the TPP-API to which the status of the ressource to be created should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the Client-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in Client-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply.  (optional)
     * @param clientNotificationContentPreferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP.  (optional)
     * @param digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param signature A signature of the request by the TPP on application level. This might be mandated by ASPSP.  (optional)
     * @param tpPSignatureCertificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained.  (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP.  (optional)
     * @param psUIPPort The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.  (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptCharset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptEncoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUAcceptLanguage The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available.  (optional)
     * @param psUUserAgent The forwarded Agent header field of the HTTP request between PSU and TPP, if available.  (optional)
     * @param psUHttpMethod HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device.  (optional)
     * @param psUGeoLocation The forwarded Geo Location of the corresponding http request between PSU and TPP if available.  (optional)
     * @param updatePaymentPsuDataRequest  (optional)
     * @return RequestConfig
     */
    fun updateSubscriptionEntryPsuDataRequestConfig(pushAccountinformationSubservice: PushAccountinformationSubserviceUpdateSubscriptionEntryPsuData, subscriptionId: kotlin.String, subscriptionEntryId: kotlin.String, authorisationId: kotlin.String, xRequestID: java.util.UUID, PSU_ID: kotlin.String?, psUIDType: kotlin.String?, psUCorporateID: kotlin.String?, psUCorporateIDType: kotlin.String?, clientNotificationURI: kotlin.String?, clientNotificationContentPreferred: kotlin.String?, digest: kotlin.String?, signature: kotlin.String?, tpPSignatureCertificate: kotlin.ByteArray?, psUIPAddress: kotlin.String?, psUIPPort: kotlin.String?, psUAccept: kotlin.String?, psUAcceptCharset: kotlin.String?, psUAcceptEncoding: kotlin.String?, psUAcceptLanguage: kotlin.String?, psUUserAgent: kotlin.String?, psUHttpMethod: PsUHttpMethodUpdateSubscriptionEntryPsuData?, psUDeviceID: java.util.UUID?, psUGeoLocation: kotlin.String?, updatePaymentPsuDataRequest: UpdatePaymentPsuDataRequest?) : RequestConfig<UpdatePaymentPsuDataRequest> {
        val localVariableBody = updatePaymentPsuDataRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        xRequestID.apply { localVariableHeaders["X-Request-ID"] = this.toString() }
        PSU_ID?.apply { localVariableHeaders["PSU-ID"] = this.toString() }
        psUIDType?.apply { localVariableHeaders["PSU-ID-Type"] = this.toString() }
        psUCorporateID?.apply { localVariableHeaders["PSU-Corporate-ID"] = this.toString() }
        psUCorporateIDType?.apply { localVariableHeaders["PSU-Corporate-ID-Type"] = this.toString() }
        clientNotificationURI?.apply { localVariableHeaders["Client-Notification-URI"] = this.toString() }
        clientNotificationContentPreferred?.apply { localVariableHeaders["Client-Notification-Content-Preferred"] = this.toString() }
        digest?.apply { localVariableHeaders["Digest"] = this.toString() }
        signature?.apply { localVariableHeaders["Signature"] = this.toString() }
        tpPSignatureCertificate?.apply { localVariableHeaders["TPP-Signature-Certificate"] = this.toString() }
        psUIPAddress?.apply { localVariableHeaders["PSU-IP-Address"] = this.toString() }
        psUIPPort?.apply { localVariableHeaders["PSU-IP-Port"] = this.toString() }
        psUAccept?.apply { localVariableHeaders["PSU-Accept"] = this.toString() }
        psUAcceptCharset?.apply { localVariableHeaders["PSU-Accept-Charset"] = this.toString() }
        psUAcceptEncoding?.apply { localVariableHeaders["PSU-Accept-Encoding"] = this.toString() }
        psUAcceptLanguage?.apply { localVariableHeaders["PSU-Accept-Language"] = this.toString() }
        psUUserAgent?.apply { localVariableHeaders["PSU-User-Agent"] = this.toString() }
        psUHttpMethod?.apply { localVariableHeaders["PSU-Http-Method"] = this.toString() }
        psUDeviceID?.apply { localVariableHeaders["PSU-Device-ID"] = this.toString() }
        psUGeoLocation?.apply { localVariableHeaders["PSU-Geo-Location"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/problem+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/subscriptions/{push-accountinformation-subservice}/{subscriptionId}/subscription-entries/{subscriptionEntryId}/authorisations/{authorisationId}".replace("{"+"push-accountinformation-subservice"+"}", encodeURIComponent(pushAccountinformationSubservice.value.toString())).replace("{"+"subscriptionId"+"}", encodeURIComponent(subscriptionId.toString())).replace("{"+"subscriptionEntryId"+"}", encodeURIComponent(subscriptionEntryId.toString())).replace("{"+"authorisationId"+"}", encodeURIComponent(authorisationId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
