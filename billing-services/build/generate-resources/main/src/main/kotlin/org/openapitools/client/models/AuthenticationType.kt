/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Type of the authentication method.  More authentication types might be added during implementation projects and documented in the ASPSP documentation.    - 'SMS_OTP': An SCA method, where an OTP linked to the transaction to be authorised is sent to the PSU through a SMS channel.   - 'CHIP_OTP': An SCA method, where an OTP is generated by a chip card, e.g. a TOP derived from an EMV cryptogram.      To contact the card, the PSU normally needs a (handheld) device.      With this device, the PSU either reads the challenging data through a visual interface like flickering or      the PSU types in the challenge through the device key pad.      The device then derives an OTP from the challenge data and displays the OTP to the PSU.   - 'PHOTO_OTP': An SCA method, where the challenge is a QR code or similar encoded visual data      which can be read in by a consumer device or specific mobile app.      The device resp. the specific app than derives an OTP from the visual challenge data and displays      the OTP to the PSU.   - 'PUSH_OTP': An OTP is pushed to a dedicated authentication APP and displayed to the PSU.   - 'SMTP_OTP': An OTP is sent via email to the PSU. 
 *
 * Values: SMS_OTP,CHIP_OTP,PHOTO_OTP,PUSH_OTP,SMTP_OTP
 */

@JsonClass(generateAdapter = false)
enum class AuthenticationType(val value: kotlin.String) {

    @Json(name = "SMS_OTP")
    SMS_OTP("SMS_OTP"),

    @Json(name = "CHIP_OTP")
    CHIP_OTP("CHIP_OTP"),

    @Json(name = "PHOTO_OTP")
    PHOTO_OTP("PHOTO_OTP"),

    @Json(name = "PUSH_OTP")
    PUSH_OTP("PUSH_OTP"),

    @Json(name = "SMTP_OTP")
    SMTP_OTP("SMTP_OTP");

    /**
     * Override [toString()] to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): kotlin.String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is AuthenticationType) "$data" else null

        /**
         * Returns a valid [AuthenticationType] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): AuthenticationType? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

